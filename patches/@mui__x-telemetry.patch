diff --git a/esm/runtime/sender.js b/esm/runtime/sender.js
index 2f72a4bc29ab17e426ee303264543ec626d99e29..0a3920c77a824403a5ab23ebf488123f447fe917 100644
--- a/esm/runtime/sender.js
+++ b/esm/runtime/sender.js
@@ -1,7 +1,7 @@
 import _extends from "@babel/runtime/helpers/esm/extends";
 import { getTelemetryEnvConfigValue } from "./config.js";
 import { fetchWithRetry } from "./fetcher.js";
-import packageJson from "../../package.json";
+import packageJson from "@mui/x-telemetry/package.json" with { type: "json" };
 function shouldSendTelemetry(telemetryContext) {
   // Priority to the config (e.g. in code, env)
   const envIsCollecting = getTelemetryEnvConfigValue('IS_COLLECTING');
diff --git a/modern/runtime/sender.js b/modern/runtime/sender.js
index 2f72a4bc29ab17e426ee303264543ec626d99e29..0a3920c77a824403a5ab23ebf488123f447fe917 100644
--- a/modern/runtime/sender.js
+++ b/modern/runtime/sender.js
@@ -1,7 +1,7 @@
 import _extends from "@babel/runtime/helpers/esm/extends";
 import { getTelemetryEnvConfigValue } from "./config.js";
 import { fetchWithRetry } from "./fetcher.js";
-import packageJson from "../../package.json";
+import packageJson from "@mui/x-telemetry/package.json" with { type: "json" };
 function shouldSendTelemetry(telemetryContext) {
   // Priority to the config (e.g. in code, env)
   const envIsCollecting = getTelemetryEnvConfigValue('IS_COLLECTING');
diff --git a/package.json b/package.json
index 6f18b9dca81d27c69399f666c4afe455611e3fda..fc71d54de96ec9193463c586730bdfa8f7aca081 100644
--- a/package.json
+++ b/package.json
@@ -34,6 +34,7 @@
   "private": false,
   "module": "./esm/index.js",
   "exports": {
+    "./package.json": "./package.json",
     ".": {
       "require": {
         "types": "./index.d.ts",
diff --git a/runtime/sender.js b/runtime/sender.js
index 0a400a4dbb034338b49ff7477ce859ecaef48280..68cc15982cda67b3de78f8a3c0c9ade6dcd4de26 100644
--- a/runtime/sender.js
+++ b/runtime/sender.js
@@ -1,15 +1,17 @@
-"use strict";
 
-var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+
+const _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.default = void 0;
-var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
-var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));
-var _config = require("./config");
-var _fetcher = require("./fetcher");
-var _package = _interopRequireDefault(require("../../package.json"));
+const _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
+const _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));
+const _config = require("./config");
+const _fetcher = require("./fetcher");
+const _package = _interopRequireDefault(require("@mui/x-telemetry/package.json"));
+
 function shouldSendTelemetry(telemetryContext) {
   // Priority to the config (e.g. in code, env)
   const envIsCollecting = (0, _config.getTelemetryEnvConfigValue)('IS_COLLECTING');
@@ -63,4 +65,4 @@ async function sendMuiXTelemetryEvent(event) {
     console.log('[mui-x-telemetry] error', _);
   }
 }
-var _default = exports.default = sendMuiXTelemetryEvent;
\ No newline at end of file
+const _default = exports.default = sendMuiXTelemetryEvent;
